openapi: 3.0.0
info:
  version: '1.0'
  title: "MoneyGenius OpenAPI 3.0"
  description: API for managing personal finance and sharing common expenses.
  license:
    name: MIT
servers:
  - url: http://localhost:8000/api/v1
    description: Development server
    
paths:
  /authentications/login:
    post:
      summary: Authenticate an existing user
      description: Use the input parameters to authenticate an existing user.   
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "user's email"
                  example: "marco@unitn.it"
                password:
                  type: string
                  description: "user's password"
                  example: "123"
      responses:
        '200':
          description: The logged user
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: Registration mail of the user
                    example: marco@unit.it
                  name:
                    type: string
                    description: Registration name of the user
                    example: marco
                  id: 
                    type: string
                    description: Id associated with the user
                    example: marco's_id
                  success:
                    type: boolean
                    description: Result of the authentication process
                    example: true
                  token:
                    type: string
                    example: eyJzdwIiOiIxMiMONTY30DkwIiwibmFtZSI6IkDvaG4
                    description: User's authentication token
                  message:
                    type: string
                    description: A message for the user
                    example: Enjoy your token! 
                  self: 
                    type: string
                    description: Reference to the logged user
                    example: users/628a2d2415fde6981acaf117
        '400':
          description: Invalid parameters 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the authentication process
                    example: false
                  message:
                    type: string
                    description: Error message
                    example: Autenticazione fallita, email o password non validi

  /authentications/signup:
    post:
      summary: Register a new user
      description: Use the input parameters to register a new user.    
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: user's email
                  example: "marco@unitn.it"
                name:
                  type: string
                  description: user's name
                  example: "Marco"
                password:
                  type: string
                  description: user's password
                  example: "123"
      responses:
        '200':
          description: The logged user
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: Registration mail of the new user
                    example: marco@unit.it
                  name:
                    type: string
                    description: Registration name of the new user
                    example: marco
                  id: 
                    type: string
                    description: Id associated with the new user
                    example: 628a2d2415fde6981acaf117
                  success:
                    type: boolean
                    description: Result of the registration process
                    example: true
                  token:
                    type: string
                    description: User's authentication token
                    example: eyJzdwIiOiIxMiMONTY30DkwIiwibmFtZSI6IkDvaG4
                  message:
                    type: string
                    description: A message for the user
                    example: Enjoy your token! 
                  self: 
                    type: string
                    description: Reference to the new user
                    example: users/628a2d2415fde6981acaf117
        '400':
          description: Invalid parameters 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the registration process
                    example: false
                  message:
                    type: string
                    description: Error message
                    example: Registrazione fallita, email o password non validi
                    
  /users/{id}/budget:
    post:
      summary: Set the budget
      description: Use the input parameter to set the budget.    
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                budget:
                  type: number
                  example: 300
      responses:
        '201':
          description: Budget set correctly
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the budget setting process
                    example: true
        '400':
          description: Invalid parameters 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the budget setting process
                    example: false
                  message:
                    type: string
                    description: Error message
                    example: Input non valido
                    
  /users/{id}/budget:
    get:
      summary: Show the budget
      description: Show the total spent at the moment and the budget available to be spent.    
      responses:
        '200':
          description: Budget spent and budget remaining correctly shown.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of budget shown
                    example: true
                  total_spent:
                    type: number
                    description: How much of the budget is already allocated to expenses
                    example: 0
                  budget:
                    type: number
                    description: Budget still to be spent 
                    example: 300
                    
  /users/{id}/categories:
    post:
      summary: Create a new category
      description: Use the input parameters to create a new category.    
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                    type: string
                    description: User's authentication token
                    example: "eyJzdwIiOiIxMiMONTY30DkwIiwibmFtZSI6IkDvaG4"
                id:
                  type: string
                  description: user's id
                  example: "628a2d2415fde6981acaf117"
                name:
                  type: string
                  description: name of the new category
                  example: "Spesa"
                color:
                  type: string
                  description: color of the new category
                  example: "#919191"
                budget:
                  type: integer
                  description: budget of the new category
                  example: 200
      responses:
        '201':
          description: Creation successful, location in the URL of the request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the operation
                    example: true
                  message:
                    type: string
                    description: A message for the user
                    example: Categoria creata correttamente! 
                  self: 
                    type: string
                    description: Reference to the new category
                    example: students/628a2d2415fde6981acaf117/categories/628a2d2415fde6981acaf11d
        '400':
          description: Invalid parameters 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the operation
                    example: false
                  message:
                    type: string
                    description: Error message
                    example: "Creazione fallita, parametri mancanti"
                    
  /users/{id}/categories/default:
    post:
      summary: Create the default category
      description: If not already present, create the default category.    
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                    type: string
                    description: User's authentication token
                    example: "eyJzdwIiOiIxMiMONTY30DkwIiwibmFtZSI6IkDvaG4"
                id:
                  type: string
                  description: User's id
                  example: "628a2d2415fde6981acaf117"
      responses:
        '201':
          description: Creation successful, location in the URL of the request 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the operation
                    example: true
                  message:
                    type: string
                    description: A message for the user
                    example: Categoria creata correttamente! 
                  self: 
                    type: string
                    description: Reference to the new category
                    example: sutdents/628a2d2415fde6981acaf117/categories/628a2d2415fde6981acaf11d
  
  /users/{id}/categories:
    delete:
      summary: Delete an existent category
      description: Use the input parameters to delete an existent category.    
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                    type: string
                    description: User's authentication token
                    example: "eyJzdwIiOiIxMiMONTY30DkwIiwibmFtZSI6IkDvaG4"
                id:
                  type: string
                  description: User's id
                  example: "628a2d2415fde6981acaf117"
                name:
                  type: string
                  description: Category name
                  example: "Spesa"
      responses:
        '204':
          description: Successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the operation
                    example: true
                  message:
                    type: string
                    description: A message for the user
                    example: Categoria rimossa correttamente! 
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of the operation
                    example: false
                  message:
                    type: string
                    description: Error message
                    example: "Cancellazione fallita, categoria non trovata"
                    
  /users/{id}/categories:
    get:
      summary: List of categories
      description: Show the list of existing categories.    
      responses:
        '200':
          description: Budget spent and budget remaining correctly shown.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Result of list shown
                    example: true
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                      
components:
  schemas:
    Category:
      type: object
      required:
        - id
        - name
        - color
        - budget
        - cat_spent
      properties:
        id:
          type: string
          description: id of the category
        name:
          type: string
          description: name of the category
        color:
          type: string
          description: color assigned to the category
        budget: 
          type: number
          description: budget assigned to the category
        cat_spent:
          type: number
          description: how much the user already spent in that category